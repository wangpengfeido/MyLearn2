{"version":3,"sources":["..\\..\\..\\..\\030vuex\\020核心概念\\010state\\index010.js"],"names":["store","Vuex","Store","state","count","mutations","addCount","componentOne","data","computed","template","methods","commit","componentTwo","$store","componentThree","a","mapState","countAlias","countPlusLocalState","app","Vue","el","components"],"mappings":";;AAAA;;;;AAIA,IAAMA,QAAQ,IAAIC,KAAKC,KAAT,CAAe;AACzBC,WAAO;AACHC,eAAO;AADJ,KADkB;AAIzBC,eAAW;AACPC,gBADO,oBACEH,KADF,EACQ;AACXA,kBAAMC,KAAN;AACH;AAHM;AAJc,CAAf,CAAd;;AAWA,IAAMG,eAAe;AACjBC,QADiB,kBACX;AACF,eAAO,EAAP;AACH,KAHgB;;AAIjBC,cAAU;AACNL,aADM,mBACC;AACH,mBAAOJ,MAAMG,KAAN,CAAYC,KAAnB;AACH;AAHK,KAJO;AASjBM,cAAU,8CATO;AAUjBC,aAAS;AACLL,gBADK,sBACK;AACN;AACAN,kBAAMY,MAAN,CAAa,UAAb;AACH;AAJI;AAVQ,CAArB;;AAkBA,IAAMC,eAAe;AACjBL,QADiB,kBACX;AACF,eAAO,EAAP;AACH,KAHgB;;AAIjBR,gBAJiB,EAIJ;AACbS,cAAU;AACNL,aADM,mBACC;AACH;AACA,mBAAO,KAAKU,MAAL,CAAYX,KAAZ,CAAkBC,KAAzB;AACH;AAJK,KALO;AAWjBM,cAAU,8CAXO;AAYjBC,aAAS;AACLL,gBADK,sBACK;AACN,iBAAKQ,MAAL,CAAYF,MAAZ,CAAmB,UAAnB;AACH;AAHI;AAZQ,CAArB;;AAmBA,IAAMG,iBAAiB;AACnBP,QADmB,kBACb;AACF,eAAO;AACHQ,eAAG;AADA,SAAP;AAGH,KALkB;;AAMnBhB,gBANmB;AAOnB;AACAS,cAAUR,KAAKgB,QAAL,CAAc;AACpBb,eAAO;AAAA,mBAASD,MAAMC,KAAf;AAAA,SADa;AAEpBc,oBAAY,OAFQ,EAEU;AAC9BC,2BAHoB,+BAGAhB,KAHA,EAGM;AACtB,mBAAOA,MAAMC,KAAN,GAAc,KAAKY,CAA1B,CADsB,CACa;AACtC;AALmB,KAAd,CARS;AAenB;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,cAAU,gDACV,gCADU,GAEV,kDAFU,GAGV,uCAzBmB;AA0BnBC,aAAS;AACLL,gBADK,sBACK;AACN,iBAAKQ,MAAL,CAAYF,MAAZ,CAAmB,UAAnB;AACH;AAHI;AA1BU,CAAvB;;AAiCA,IAAIQ,MAAM,IAAIC,GAAJ,CAAQ;AACdC,QAAI,MADU;AAEdC,gBAAY;AACRhB,kCADQ;AAERM,kCAFQ;AAGRE;AAHQ;AAFE,CAAR,CAAV","file":"index010.js","sourcesContent":["/**\r\n * Created by dell on 2017/8/27.\r\n */\r\n\r\nconst store = new Vuex.Store({\r\n    state: {\r\n        count: 0,\r\n    },\r\n    mutations: {\r\n        addCount(state){\r\n            state.count++;\r\n        }\r\n    }\r\n});\r\n\r\nconst componentOne = {\r\n    data(){\r\n        return {};\r\n    },\r\n    computed: {\r\n        count(){\r\n            return store.state.count;\r\n        }\r\n    },\r\n    template: '<div @click=\"addCount\">count:{{count}}</div>',\r\n    methods: {\r\n        addCount(){\r\n            //在计算属性中取得状态\r\n            store.commit('addCount');\r\n        }\r\n    },\r\n};\r\n\r\nconst componentTwo = {\r\n    data(){\r\n        return {};\r\n    },\r\n    store,       //将store注入组件及子组件\r\n    computed: {\r\n        count(){\r\n            //通过注入来访问store\r\n            return this.$store.state.count;\r\n        }\r\n    },\r\n    template: '<div @click=\"addCount\">count:{{count}}</div>',\r\n    methods: {\r\n        addCount(){\r\n            this.$store.commit('addCount');\r\n        }\r\n    },\r\n};\r\n\r\nconst componentThree = {\r\n    data(){\r\n        return {\r\n            a: 'aaa'\r\n        };\r\n    },\r\n    store,\r\n    //使用Vuex.mapState()辅助函数\r\n    computed: Vuex.mapState({\r\n        count: state => state.count,\r\n        countAlias: 'count',          //使用字符串，相当于 state => state.count\r\n        countPlusLocalState(state){\r\n            return state.count + this.a;       //使用this时必须使用常规函数\r\n        }\r\n    }),\r\n    //当计算属性名与state属性名相同时，可以使用字符串数组\r\n    // computed: Vuex.mapState(['count']),\r\n    //当mapState()函数与其他计算属性混用时，使用对象展开运算符\r\n    // computed:{\r\n    //     ...Vuex.mapState(['count']),\r\n    //     localComputed:()=>'this is local computed',\r\n    // },\r\n    template: '<div @click=\"addCount\">count:{{count}}<br/>' +\r\n    'countAlias:{{countAlias}}<br/>' +\r\n    'countPlusLocalState:{{countPlusLocalState}}<br/>' +\r\n    'localComputed:{{localComputed}}</div>',\r\n    methods: {\r\n        addCount(){\r\n            this.$store.commit('addCount');\r\n        }\r\n    },\r\n};\r\n\r\nlet app = new Vue({\r\n    el: '#app',\r\n    components: {\r\n        componentOne,\r\n        componentTwo,\r\n        componentThree\r\n    }\r\n});\r\n\r\n\r\n"]}