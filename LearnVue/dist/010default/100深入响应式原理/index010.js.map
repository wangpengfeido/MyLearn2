{"version":3,"sources":["..\\..\\..\\010default\\100深入响应式原理\\index010.js"],"names":["vm","Vue","el","data","childData","a","methods","addB","b","changeB","addC","$set","changeC","addD","Object","assign","d","changeD","changeA","console","log","$el","querySelector","textContent","$nextTick"],"mappings":";;AAAA;;;;AAIA,IAAIA,KAAK,IAAIC,GAAJ,CAAQ;AACbC,QAAI,MADS;AAEbC,UAAM;AACFC,mBAAW;AACPC,eAAG,KADI;AADT,KAFO;AAObC,aAAS;AACLC,cAAM,gBAAY;AACd,iBAAKH,SAAL,CAAeI,CAAf,GAAmB,KAAnB,CADc,CACuB;AACxC,SAHI;AAILC,iBAAS,mBAAY;AACjB,iBAAKL,SAAL,CAAeI,CAAf,IAAoB,GAApB;AACH,SANI;AAOLE,cAAM,gBAAY;AACd;AACA;AACA,iBAAKC,IAAL,CAAU,KAAKP,SAAf,EAA0B,GAA1B,EAA+B,KAA/B,EAHc,CAGiC;AAClD,SAXI;AAYLQ,iBAAS,mBAAY;AACjB,iBAAKD,IAAL,CAAU,KAAKP,SAAf,EAA0B,GAA1B,EAA+B,MAA/B;AACH,SAdI;AAeLS,cAAM,gBAAY;AACd;AACA,iBAAKT,SAAL,GAAiBU,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKX,SAAvB,EAAkC,EAACY,GAAG,KAAJ,EAAlC,CAAjB;AACH,SAlBI;AAmBLC,iBAAS,mBAAY;AACjB,iBAAKb,SAAL,CAAeY,CAAf,IAAoB,GAApB;AACH,SArBI;AAsBLE,iBAAS,mBAAY;AACjB,iBAAKd,SAAL,CAAeC,CAAf,IAAoB,GAApB;AACAc,oBAAQC,GAAR,CAAY,SAAZ,EAAsB,KAAKC,GAAL,CAASC,aAAT,CAAuB,IAAvB,EAA6BC,WAAnD;AACA,iBAAKC,SAAL,CAAe,YAAY;AACvB;AACAL,wBAAQC,GAAR,CAAY,QAAZ,EAAqB,KAAKC,GAAL,CAASC,aAAT,CAAuB,IAAvB,EAA6BC,WAAlD;AACH,aAHD;AAIH;AA7BI;AAPI,CAAR,CAAT","file":"index010.js","sourcesContent":["/**\r\n * Created by dell on 2017/8/26.\r\n */\r\n\r\nlet vm = new Vue({\r\n    el: '#app',\r\n    data: {\r\n        childData: {\r\n            a: 'aaa',          //响应式属性\r\n        }\r\n    },\r\n    methods: {\r\n        addB: function () {\r\n            this.childData.b = 'bbb';            //添加非响应式属性\r\n        },\r\n        changeB: function () {\r\n            this.childData.b += 'b';\r\n        },\r\n        addC: function () {\r\n            //注意：不允许动态添加根级响应式属性，即不允许调用类似this.$set(this,'c','ccc')\r\n            //注意：当动态设置响应式属性时，vue将触发一次其祖先属性及祖先属性的子属性的检查\r\n            this.$set(this.childData, 'c', 'ccc');         //添加响应式属性\r\n        },\r\n        changeC: function () {\r\n            this.$set(this.childData, 'c', 'cccc');\r\n        },\r\n        addD: function () {\r\n            //这样也可以添加响应式属性，这在一次添加许多属性时很有用\r\n            this.childData = Object.assign({}, this.childData, {d: 'ddd'});\r\n        },\r\n        changeD: function () {\r\n            this.childData.d += 'd';\r\n        },\r\n        changeA: function () {\r\n            this.childData.a += 'a';\r\n            console.log('before:',this.$el.querySelector('.a').textContent);\r\n            this.$nextTick(function () {\r\n                //在DOM更新后调用\r\n                console.log('after:',this.$el.querySelector('.a').textContent);\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\n"]}